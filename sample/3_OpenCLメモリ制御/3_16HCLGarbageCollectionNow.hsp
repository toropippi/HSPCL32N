// clCreateBufferやclCreateBufferFromなどcl mem objectを生成すると
// 明示的にclReleaseBufferで解放しない限り残り続けます。
// もしコード内でcl mem idをロストしてしまうと解放することもできなくなってしまいます。

// そこでプラグイン側で全て作成したcl mem idを覚えておき、擬似的なGCを行なうことで、いらなくなったcl memを解放できるようにしたのがclGarbageCollectionNow命令です。
// ただしメモリの参照カウンタ等実装できないので手動でカウンタを回して頂く必要があります。

#include "hspcl32n.as"
	clinit
	
	n=256//配列サイズ 256byte
	clmem0=clCreateBuffer(n)

	n=1024*1024*512//配列サイズ 512MB
	clmem1=clCreateBuffer(n)

	n=int64(1024)*1024*1024*1//配列サイズ 1GB
	clmem2=clCreateBuffer(n)

	dim data,64
	clWriteBuffer clmem0,data,256
	clWriteBuffer clmem1,data,256
	clWriteBuffer clmem2,data,256//writeしないと実際には確保されない

	mes "clmem0〜clmem2が存在する" 
	mes "総メモリサイズ(byte) = "+clGetAllBufferSize()
	mes 
	mes 


	mes "clIncRefcntCLBufferId clmem0,clmem2"
	clIncRefcntCLBufferId clmem0,clmem2//clmem0,clmem2の参照カウンタ(という名義の変数)をインクリメント
	mes "clGarbageCollectionNow"
	clGarbageCollectionNow//ここでclmem1は解放される
	mes "総メモリサイズ(byte) = "+clGetAllBufferSize()
	mes 
	mes 

	mes "clDecRefcntCLBufferId clmem0,clmem2"
	clDecRefcntCLBufferId clmem0,clmem2//clmem0,clmem2の参照カウンタ(という名義の変数)をデクリメント
	mes "clGarbageCollectionNow clmem0"
	clGarbageCollectionNow clmem0//ここでclmem0は本来解放されるが除外される
	mes "総メモリサイズ(byte) = "+clGetAllBufferSize()


//インクリメントしたあとcl mem idをロストするとさすがにどうやっても解放できなくなるので
//注意してください。