#include "hspcl32n.as"
	clini
	screen 0,512,512
	clsetdev 0;計算に使うデバイス
	maxkz=512*512;マンデルブロー画像の大きさ
	clBuildProgram "mand.cl",prgid
	clCreateKernel prgid,"calc",krncalc;マンデルブロー計算カーネル設定
	clCreateBuffer vram,3*maxkz;HSP側VRAMと同じ 1ドット=3*char

	mref i,66
	ms=gettime(6)
	flm=0
	gtx=-1.0;画面の左上x
	gty=-1.0;画面の左上y
	gtz=2.0;画面の範囲
	clSetKernel krncalc,0,vram;グラボ上のメモリ、mref で取得した変数にこれをコピーすれば画面更新できる;この「vram」はGPUメモリ上に確保したメモリ領域のポインタ値で、これは不変なのでここで一回セットすればループごとに設定しなくていい
	dim local_item_size,3
	dim global_item_size,3

*main
	mkey=key
	getkey key,1
	mww=mousew
	if kanseimw:kanseimw-:mww+=99
	if mww!0{
	tyux=gtx+gtz*mousex/512
	tyuy=gty+gtz*(512-mousey)/512
		if mww>0{;ズーム
			gtz*=0.9
		}else{
			gtz*=1.11111111
		}
	gtx=tyux-gtz*mousex/512
	gty=tyuy-gtz*(512-mousey)/512
	}

	if dblkck!0:dblkck-
	if dblkck>19:kanseimw=7:dblkck=0
	if key:if mkey=0{
		mgtx=gtx
		mgty=gty
		mossx=mousex
		mossy=mousey
		dblkck+=19
		}
	if mww=0:if key:if mkey{
		gtx=mgtx+gtz*(mossx-mousex)/512
		gty=mgty+gtz*(mousey-mossy)/512
		}

	clSetKernel krncalc,1,clfloat(gtx)
	clSetKernel krncalc,2,clfloat(gty)
	clSetKernel krncalc,3,clfloat(gtz/512)

;	global_item_size=512,512
;	local_item_size=8,8
	clDoKrn2 krncalc,512,512,8,8
	clReadBuffer vram,i,3*maxkz;mref で取得した変数にvramをコピー
	flm+
	if ms!gettime(6):ms=gettime(6):fps=flm:flm=0
	pos 0,0:color 255,55,55:mes "fps="+fps+""
	await 4;fpsは２５０で打ち止め
	getkey keye,27:if keye:goto*sthsr
	redraw 1
	goto*main

*sthsr
	CLbye
	end