//べき乗法で
//正則行列 A (2*2)の固有値と固有ベクトルを求めるサンプル
#include "hspcl32n.as"
	clinit
	
	raw=2
	col=2
	//A
	A=clCreateBuffer(raw*col*4)
	clBLAS_Set2DShape A,raw,col
	clWriteIndex_fp A,0,1
	clWriteIndex_fp A,1,2
	clWriteIndex_fp A,2,3
	clWriteIndex_fp A,3,4
	
	//u
	u=clCreateBuffer(raw*4)
	clWriteIndex_fp u,0,1
	clWriteIndex_fp u,1,2
	
	//uu
	uu=clCreateBuffer(raw*4)
	clFillBuffer uu,float(0)

	//eigen_value
	eigen_value = clCreateBuffer(4)

	//L2ノルム格納用
	l2n2 = clCreateBuffer(4)

	//固有値の収束条件
	rel_eps = float(0.0001)
	rel_delta_u = float(100.0)


	//べき乗法のループ
	while rel_delta_u>=rel_eps
		//#正規化(ノルムを1にする)
	    //uu = u/np.linalg.norm(u) 
		l2n2=clBLAS_snrm2(u)//uのL2ノルムが求まる
		clDoXf "A[i]=B[i]/C[0];",uu,u,l2n2

		//u = np.dot(A,uu.T)
		clBLAS_sgemv u,A,uu

		//eigen_value=np.dot(uu,u)/(np.dot(uu,uu.T))
		//※並列数=1
		clDoXf "A[i]=B[i]/C[i];",eigen_value,clBLAS_sdot(uu,u),clBLAS_sdot(uu,uu)

		//delta_u_vec = uu-u/np.linalg.norm(u)
		clBLAS_snrm2 l2n2,u//uのL2ノルムが求まる
		delta_u_vec = clDoXf("OUT[i]=A[i]-B[i]/C[0];",uu,u,l2n2 )

	    //abs_delta_u_value= np.linalg.norm(delta_u_vec)
	    abs_delta_u_value = clBLAS_snrm2(delta_u_vec)
	    
		//rel_delta_u=abs_delta_u_value/np.abs(eigen_value) # 繰り返しステップに対する固有値の相対変化量
		rel_delta_u = clReadIndex_fp(abs_delta_u_value,0) / clReadIndex_fp(eigen_value,0)
		if rel_delta_u<float(0) : rel_delta_u = -rel_delta_u
		
		clGarbageCollectionNow u,A,uu,eigen_value//除外リスト以外の無駄に生成したmemたちを削除
	wend


	mes "u= ["+clReadIndex_fp(uu,0)+" "+clReadIndex_fp(uu,1)+" ]"
	mes "eigen_value= "+clReadIndex_fp(eigen_value,0)+""
	mes "rel_delta_u= "+rel_delta_u+""
	stop










//参考にしたpythonコード
//https://qiita.com/sci_Haru/items/e5278b45ab396424ad86

/*
import numpy as np

A=np.array([[1,2],[3,4]])

x0 = np.array([1,0]); x1 = np.array([0,1])
u = 1.0*x0+2.0*x1 #初期固有ベクトルです。適当です。

rel_eps = 0.0001 # 固有値の収束条件
#クリロフ列生成

rel_delta_u = 100.0
eigen_value = 0
uu = 0
while rel_delta_u >= rel_eps :  # メインループ
    uu = u/np.linalg.norm(u) #正規化(ノルムを1にする)
    u = np.dot(A,uu.T)

    eigen_value=np.dot(uu,u)/(np.dot(uu,uu.T))

    delta_u_vec = uu-u/np.linalg.norm(u)
    abs_delta_u_value= np.linalg.norm(delta_u_vec)
    rel_delta_u=abs_delta_u_value/np.abs(eigen_value) # 繰り返しステップに対する固有値の相対変化量


print("u=",uu)
print("eigen_value=",eigen_value)
print("rel_delta_u_vec = ",rel_delta_u)
*/