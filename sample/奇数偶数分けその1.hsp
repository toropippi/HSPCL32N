/////////////////////////////////////////////////////////////////////////////////////////////////
;カーネル内でifやfor(ループ)を使うサンプル
;65536*64個のランダムな数をGPUに仕分けさせる
;1スレッドあたり64個の数を抜き出して、偶数、奇数の数を割り出す
;このスレッドを65536個回し、1スレッドがそれぞれ65536要素のchar型配列変数に奇数、偶数の数を保存
;あとはCPUで65536回加算して奇数偶数の数を割り出す。
/////////////////////////////////////////////////////////////////////////////////////////////////


randomize

#include "hspcl32n.as"
	clini
	if stat==0:dialog "対応ビデオカードがありません。終了します",1:end

	clSetDev 0;0番目のデバイスを使って計算する
	mes "65536個のスレッドを実行します。\n各々のスレッドで64個の数値を偶数奇数分けしていきます。\n\n"
	dim rando,65536*64
	intkisuko=0
	intgusuko=0
		repeat 65536*64;419万個のランダム数生成
		rando.cnt=rnd(32767)*rnd(32000)+rnd(32767)
		if rando.cnt\2:intkisuko++:else:intgusuko++
		loop
	mes "65536*64個のランダム数生成"

	clBuildProgram "奇数偶数分けその1.cl",prgid;
	clCreateKernel prgid,"wake",krnid;
	clCreateBuffer vram,65536*64*4;
	mes "65536*64個のint型メモリ確保"
	clCreateBuffer kisu,65536;奇数の数を保存するchar型配列変数を作成
	clCreateBuffer gusu,65536;偶数の数を保存するchar型配列変数を作成
	clSetKernel krnid,0,vram;
	clSetKernel krnid,1,kisu;
	clSetKernel krnid,2,gusu;
	clWriteBuffer vram,rando,65536*64*4;
	mes "データ転送"
	clDoKrn1 krnid,65536*64/64,128;1スレッドあたり64個のint変数を仕分け
	clwaittask;これがないと計算中なのにclReadBufferで計算途中のものを読み込み正しい答えがでない
	mes "カーネル実行中"

	dim k,65536/4
	clReadBuffer kisu,k,65536;vram → k  に65536byteコピー
	奇数の数=0
		repeat 65536
		奇数の数+=peek(k,cnt)
		loop
	clReadBuffer gusu,k,65536;vram → k  に65536byteコピー
	偶数の数=0
		repeat 65536
		偶数の数+=peek(k,cnt)
		loop
	mes "\nGPU上で仕分けした結果"
	mes "奇数の数		"+奇数の数
	mes "偶数の数		"+偶数の数
	mes "奇数の数＋偶数の数＝	"+(偶数の数+奇数の数)+"    =4194304なら正確にできた"
	mes "\nCPU上で仕分けした結果"
	
	mes "奇数の数		"+intkisuko
	mes "偶数の数		"+intgusuko
	mes "奇数の数＋偶数の数＝	"+(intkisuko+intgusuko)+"    =4194304なら正確にできた"
	
	clbye
	stop