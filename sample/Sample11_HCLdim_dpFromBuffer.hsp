//やってることはSample05_VecAdd.hspの浮動小数点版
//今度はhsot_CをHSPで最初から生成せず、clmemからReadしてくるタイミングで初期化&確保
#include "hspcl32n.as"
	clinit
	prg=clCreateProgram("VecAdd.cl")//OpenCLのコードが書かれたファイル。コンパイルもここで
	krn=clCreateKernel(prg,"vecAddD")//"VecAdd.cl"にかかれた関数をもってくる
	
	n=256//配列サイズ
	
	ddim host_A,n
	ddim host_B,n
		repeat n
		host_A.cnt=double(cnt)//HSPで初期値を代入
		host_B.cnt=double(cnt)
		loop
	//CPU側で確保した変数を、サイズをそのままGPUにも確保し転送
	clmem_A=clCreateBufferFrom(host_A)
	clmem_B=clCreateBufferFrom(host_B)
	clmem_C=clCreateBuffer(n*8)
	
	clSetKernel krn,0,clmem_A//OpenCLコードの"vecAdd"に引数を適応
	clSetKernel krn,1,clmem_B//OpenCLコードの"vecAdd"に引数を適応
	clSetKernel krn,2,clmem_C//OpenCLコードの"vecAdd"に引数を適応
	
	mes "計算start"
	clDoKrn1 krn,n,n//GPUで計算。clDoKrn1は1次元の数で並列数を指定する命令
	clFinish
	mes "計算end"

	//ここでHSP側の配列変数を生成してReadBufferしてくる。配列のサイズは自動で決定される
	//clReadBuffer clmem_C,host_C,n*8,0,0はいらない
	cldim_dpFromBuffer host_C,clmem_C
	
		repeat n
		mes ""+host_A.cnt+" + "+host_B.cnt+" = "+host_C.cnt
		loop
	stop