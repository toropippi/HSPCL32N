//これ以降、event関連のサンプルが多いです。
//eventはclReadBuffer,clWriteBufferやclDoKrn1などに関連付けられ、それぞれ実行時間や実行状況の取得、実行条件の指定をできるのでとても便利です。

//clGetEventLogsでeventの実行時間などを取得できます。
//clGetEventStatusでeventが実行終了しているかどうかの判定ができます。
//clSetWaitEvent、clSetWaitEventsで任意のコマンドに任意のeventの終了待ちができます。
//clWaitForEvent、clWaitForEventsでCPUがeventの終了待ちを行います。
//clCreateUserEvent、clSetUserEventStatusでUser_eventを作成したり状態をsetすることができます。
//_ExclSetEventMaxをclInitの前に実行することで、eventの上限を増やすことができます。デフォルトではevent id 0〜65535まで使えます

//まずはclGetEventLogsで、手動でプロファイリング可視化のコードを作ってみたというサンプルです。
#include "hspcl32n.as"
#include "ViewTimeStamp_module.as"

	randomize
	clinit
	prg=clCreateProgram("VecAdd.cl")
	krn=clCreateKernel(prg,"vecAdd")
	
	n=65536
	clmem_A=clCreateBuffer(n*4)
	clmem_B=clCreateBuffer(n*4)
	clmem_C=clCreateBuffer(n*4)
	
	dim host_A,n
	dim host_B,n
	dim host_C,n
		repeat n
		host_A.cnt=cnt
		host_B.cnt=cnt
		loop
	
	clWriteBuffer clmem_A,host_A,n*4,,,,0//event_id 0
	clWriteBuffer clmem_B,host_B,n*4,,,,1//event_id 1
	
	clSetKrns krn,clmem_A,clmem_B,clmem_C
	
	clDoKrn1 krn,n,64,2//event_id 2
	//clFinish//このclFinishは本来いらないけどいれたらAMD GPUのgfx902でもkrnの正しいtimeスタンプ取得できた
	clReadBuffer clmem_C,host_C,n*4,,,,3//event_id 3
	
	//eventから時間情報を取得。返り値は64bit int
	ViewEvents1 4
	stop
	
//一部のAMD GPU(例えばgfx902)だとkernel実行開始終了時間と、データ転送開始終了時間でズレが生じて、それぞれバラバラの時間が取得されるというバグ？不具合？仕様？があります。
//これだからOpenCL・・いやなんでも
//と思っていたらclDoKrn1のあとclFinishをいれることで正しいtimeが取得できた。でもいちいちカーネル実行終了待ちしてはパフォーマンス出せないし結局使えないんじゃ・・・いやなんでも