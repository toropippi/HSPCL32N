#include "hspcl32n.as"
	clinit
	//clSetDevice 0

#const WX 128//格子x ここを変えた場合kabep.pngなど4枚の画像も調整する必要あり
#const WY 128//格子y ここを変えた場合kabep.pngなど4枚の画像も調整する必要あり
#const WSZ2 WX*WY/2
#const ipn 6//格子スクリーン拡大倍率
#const taba 4//粒子の線どうしの縦の間隔(ドット)
DT=float(0.5)//デルタtime、時間刻み
μ=float(0.00001)//粘性率
μDT=μ*DT
speed=float(0.45)
alpha=float(1.0/(1.0+4.0*μDT))
#const RYSnum WX*WY*ipn*ipn//全体粒子数
#const RYSloop 128//何stepで粒子の初期化が一周するか
#const RYS1stepnum RYSnum/RYSloop//粒子座標初期化時に一気に更新する粒子数

	screen 0,WX*ipn,WY*ipn
	mref gsel0vram,66

	global_size=WX,WY
	local_size=WX,1

	fdim kkx,WX*WY
	fdim kky,WX*WY
		repeat WX*WY
		kkx.cnt=float(0)
		loop
		repeat WY-1
		kkx(1+cnt*WX)=float(speed)
		loop
		repeat WY-1
		kkx(cnt*WX)=float(speed)
		loop
	//描画粒子関連
	gosub*RYS_Setting
	
	//OpenCL関連
	//コードコンパイル、kernel抽出
	gosub*CreateKernels
	//cl_bufferを作成
	gosub*BufferSetting
	//SetKernel
	gosub*KernelSetting
	//OpenCL関連ここまで



////////////メインルーチン////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////メインルーチン////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////メインルーチン////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////メインルーチン////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
;cip移流(壁のところでは参照はするが書き込みはしない)、	 f値とg(微分)値が同時に更新される
;3次関数の部分では第4/5引数の速度はf3を参照、1から3引数はf3、g1を入力、係数もf3とg1から決定、f4、g2を出力
;差分式では、f3とg2を参照
;f4とg3を出力
;ここで一段落


;→外力	 f値のみ更新f0→f1
;→発散f1参照
;→圧力sor(壁のところでは参照はするが書き込みはしない)
;→圧力射影	 f値のみ更新f1→f2
;→cip微分値反映(ニューグレード、ソースでは圧力の更新しか反映されてないが、外力も含めないとダメ、さっきg値が更新された時のf値から今のf値までどのくらいずれたか)g0→g1、f0とf2参照
;→拡散、これはf値のみの更新でいい。f2→f3、f2参照
;→　　→　はじめへ
*main
	clCopyBuffer YU,YUN
	clCopyBuffer YV,YVN
	clCopyBuffer YP,YPN
	gosub*粘性
	if flm\8==0:gosub*外力
	gosub*pressure
	gosub*rhs
	gosub*newgrad
	gosub*veloc
	gosub*粒子
	if flm\5==4:gosub*粒子復活
	if flm\8==0:gosub*表示
	gosub*dcip0
	if flm\8==0{
		getkey key,27:if key:end
		await 0
	}
	flm++
	goto*main

////////////メインルーチン////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////メインルーチン////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////メインルーチン////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////メインルーチン////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*粘性
	clCopyBuffer GXd0,YUN
	clCopyBuffer GYd0,YVN
		repeat limit(10000.0*μ,0,(WX+WY)/2)
		clDoKernel krn50,2,global_size,local_size
		clDoKernel krn51,2,global_size,local_size
		loop
	return

*外力
	mkey=key1
	stick key1,256
	if key1&256{
		imaxx=mousex
		imayy=mousey
		if mkey=0:omxx=imaxx:omyy=imayy//クリックした瞬間なら
		xsa=omxx-imaxx
		ysa=omyy-imayy
		if (xsa!0)|(ysa!0){
			clReadBuffer YUN,kkx,4*WX*WY
			clReadBuffer YVN,kky,4*WX*WY
				repeat 16
				wwwx=(imaxx/ipn+cnt\4)\WX
				wwwy=(imayy/ipn+cnt/4)\WY
				if peek(kbx,wwwx+wwwy*WX):kkx(wwwx+wwwy*WX)=kkx(wwwx+wwwy*WX)-float(0.013)*xsa
				if peek(kby,wwwx+wwwy*WX):kky(wwwx+wwwy*WX)=kky(wwwx+wwwy*WX)-float(0.013)*ysa
				loop
			clWriteBuffer YUN,kkx,4*WX*WY
			clWriteBuffer YVN,kky,4*WX*WY
		}
		omxx=imaxx
		omyy=imayy
	}
	return

*pressure
	clDoKernel krn22,2,global_size,local_size;div計算
	clCopyBuffer YP,YPN
	//圧力計算はコストが高いのでとにかく最適化
		repeat 48
		clDoKrn1 krn20,WSZ2,0
		clDoKrn1 krn21,WSZ2,0//ローカルワークサイズはOpenCL実装に任せることに
		loop
	return

*rhs
	clDoKernel krn3,2,global_size,local_size
	return

*newgrad
	clDoKernel krn00,2,global_size,local_size
	clDoKernel krn01,2,global_size,local_size
	clDoKernel krn02,2,global_size,local_size
return

*veloc
	clCopyBuffer YU,YUN
	clCopyBuffer YV,YVN
	clDoKernel krn4,2,global_size,local_size

	clCopyBuffer GXd0,GXU
	clCopyBuffer GYd0,GYU
	clCopyBuffer Yd0,YUN

	clCopyBuffer GXd1,GXV
	clCopyBuffer GYd1,GYV
	clCopyBuffer Yd1,YVN

	clCopyBuffer GXd2,GXP
	clCopyBuffer GYd2,GYP
	clCopyBuffer Yd2,YPN
	return

*粒子//粒子移動ルーチン
	clDoKrn1 ryuusi,RYSnum,local_size.0*local_size.1;
	return

*粒子復活
	//CPU→GPU転送バージョン
	//clWriteBuffer RYS,ryuusihspgawa,RYS1stepnum*2*4,RYS1stepnum*2*4*hktkais,0,1

	//GPU→GPU転送バージョン、速度で有利なためこちらを採用
	//コピー先メモリオブジェクトid , コピー元メモリオブジェクトid , コピーサイズ , コピー先オフセット , コピー元オフセット
	clCopyBuffer RYS,RYS_syoki,RYS1stepnum*2*4,RYS1stepnum*2*4*hktkais,0
	
	hktkais++
	hktkais\=RYSloop
	return

*表示
	clDoKrn1 kout0,3*WX*WY*ipn*ipn/4,local_size.0*local_size.1;
	clDoKrn1 kout,WX*ipn*WY*ipn,local_size.0*local_size.1;
	//clFinish
	clReadBuffer out,gsel0vram,3*WX*WY*ipn*ipn
	pos 0,0:color 255,100,100
	gsel 0
	redraw 1
	//秒がかわったら
	if mtim!=gettime(6){
		mtim=gettime(6)
		viewfps=flm-lastflm
		lastflm=flm
	}
	mes "fps"+viewfps
	redraw 0
	return

*dcip0
	clDoKernel krn10,2,global_size,local_size
	clDoKernel krn11,2,global_size,local_size
	clDoKernel krn12,2,global_size,local_size
	return


//粒子関連の初期設定
*RYS_Setting
	fdim ryuusihspgawa,RYS1stepnum*2//粒子発生初期位置x,yが格納されている
		repeat RYS1stepnum
		ryuusihspgawa(cnt*2)  =(float(1.940389)/taba)*(cnt/(WY*ipn/taba))
		ryuusihspgawa(cnt*2+1)=float((1.0*taba*cnt+0.5*taba+0.005)\(WY*ipn))
		loop
	//この粒子初期値をstepごとにRYSに書き込んでいく。このときCPU→GPUだと遅くなりそうなので予めGPUに転送しておく。
	//どうせ中身の数値は変わらないので
	RYS_syoki=clCreateBufferFrom(ryuusihspgawa)
	return


*CreateKernels
	prg=clCreateProgram("nabie.cl","-D WX="+WX+" -D WY="+WY+" -D ipn="+ipn+"")//BuildOpntionでOpenCLに#define送る
	krn00=clCreateKernel(prg,"newgrad")
	krn01=clCreateKernel(prg,"newgrad")
	krn02=clCreateKernel(prg,"newgrad")
	krn10=clCreateKernel(prg,"dcip0")
	krn11=clCreateKernel(prg,"dcip0")
	krn12=clCreateKernel(prg,"dcip0")
	krn50=clCreateKernel(prg,"nensei0")
	krn51=clCreateKernel(prg,"nensei1")
	krn20=clCreateKernel(prg,"pressure0")
	krn21=clCreateKernel(prg,"pressure1")
	krn22=clCreateKernel(prg,"div")
	krn3=clCreateKernel(prg,"rhs")
	krn4=clCreateKernel(prg,"veloc")
	kout=clCreateKernel(prg,"out")
	kout0=clCreateKernel(prg,"out0")
	firstSetting=clCreateKernel(prg,"firstSetting")
	ryuusi=clCreateKernel(prg,"ryuusi")
	return

*BufferSetting
	YU=clCreateBufferFrom(kky)
	YUN=clCreateBufferFrom(kky)
	GXU=clCreateBufferFrom(kky)
	GYU=clCreateBufferFrom(kky)

	YV=clCreateBufferFrom(kky)
	YVN=clCreateBufferFrom(kky)
	GXV=clCreateBufferFrom(kky)
	GYV=clCreateBufferFrom(kky)	

	GXd0=clCreateBufferFrom(kky)
	GYd0=clCreateBufferFrom(kky)
	Yd0=clCreateBufferFrom(kky)
	GXd1=clCreateBufferFrom(kky)
	GYd1=clCreateBufferFrom(kky)
	Yd1=clCreateBufferFrom(kky)
	GXd2=clCreateBufferFrom(kky)
	GYd2=clCreateBufferFrom(kky)
	Yd2=clCreateBufferFrom(kky)

	YP=clCreateBufferFrom(kky)
	YPN=clCreateBufferFrom(kky)
	GXP=clCreateBufferFrom(kky)
	GYP=clCreateBufferFrom(kky)

	YUT=clCreateBufferFrom(kky)
	YVT=clCreateBufferFrom(kky)
	YUV=clCreateBufferFrom(kky)
	YVU=clCreateBufferFrom(kky)
	DIV=clCreateBufferFrom(kky)

	kabeP=clCreateBuffer(WX*WY):clWriteBuffer kabeP,kky,WX*WY
	kabeX=clCreateBuffer(WX*WY):clWriteBuffer kabeX,kky,WX*WY
	kabeY=clCreateBuffer(WX*WY):clWriteBuffer kabeY,kky,WX*WY

	out=clCreateBuffer(WX*WY*ipn*ipn*3);画面
	RYS=clCreateBuffer(RYSnum*4*2)

	clSetKernel firstSetting,0,RYS
	clDoKrn1 firstSetting,RYSnum,local_size.0*local_size.1;

	clWriteBuffer YUN,kkx
	clWriteBuffer YVN,kky

	dim kbp,WX*WY/4
	dim kbx,WX*WY/4
	dim kby,WX*WY/4

	buffer 1:picload "kabep.png"
		repeat WX:a3=cnt:repeat WY
			pget a3,cnt:poke kbp,a3+cnt*WX,ginfo_r
		loop:loop

	buffer 1:picload "kabex.png"
		repeat WX:a3=cnt:repeat WY
			pget a3,cnt:poke kbx,a3+cnt*WX,ginfo_r
		loop:loop

	buffer 1:picload "kabey.png"
		repeat WX:a3=cnt:repeat WY
			pget a3,cnt:poke kby,a3+cnt*WX,ginfo_r
		loop:loop

	buffer 1:picload "kabew.png"
		repeat WX:a3=cnt:repeat WY
			pget a3,cnt
			if ginfo_r=0{
			poke kbp,a3+cnt*WX,0
			poke kbx,a3+cnt*WX,0
			poke kbx,(a3+1)\WX+cnt*WX,0
			poke kby,a3+cnt*WX,0
			poke kby,a3+((cnt+1)\WY)*WX,0
		}
		loop:loop

	clWriteBuffer kabeP,kbp,WX*WY
	clWriteBuffer kabeX,kbx,WX*WY
	clWriteBuffer kabeY,kby,WX*WY
	return

*KernelSetting
	clSetKernel krn50,0,YU
	clSetKernel krn50,1,YUN
	clSetKernel krn50,2,YV
	clSetKernel krn50,3,YVN
	clSetKernel krn50,4,GXd0
	clSetKernel krn50,5,GYd0
	clSetKernel krn50,6,μDT
	clSetKernel krn50,7,alpha
	clSetKernel krn50,8,kabeX
	clSetKernel krn50,9,kabeY

	clSetKernel krn51,0,YU
	clSetKernel krn51,1,YUN
	clSetKernel krn51,2,YV
	clSetKernel krn51,3,YVN
	clSetKernel krn51,4,GXd0
	clSetKernel krn51,5,GYd0
	clSetKernel krn51,6,μDT
	clSetKernel krn51,7,alpha
	clSetKernel krn51,8,kabeX
	clSetKernel krn51,9,kabeY

	clSetKernel krn22,1,YUN
	clSetKernel krn22,2,YVN
	clSetKernel krn22,0,DIV

	clSetKernel krn20,0,DIV
	clSetKernel krn20,1,YPN
	clSetKernel krn20,2,kabeP
	clSetKernel krn21,0,DIV
	clSetKernel krn21,1,YPN
	clSetKernel krn21,2,kabeP

	clSetKernel krn3,0,YUN
	clSetKernel krn3,1,YVN
	clSetKernel krn3,2,YPN
	clSetKernel krn3,3,kabeX
	clSetKernel krn3,4,kabeY

	clSetKernel krn02,0,YUN
	clSetKernel krn02,1,YU
	clSetKernel krn02,2,GXU
	clSetKernel krn02,3,GYU
	clSetKernel krn02,4,kabeX

	clSetKernel krn00,0,YVN
	clSetKernel krn00,1,YV
	clSetKernel krn00,2,GXV
	clSetKernel krn00,3,GYV
	clSetKernel krn00,4,kabeY

	clSetKernel krn01,0,YPN
	clSetKernel krn01,1,YP
	clSetKernel krn01,2,GXP
	clSetKernel krn01,3,GYP
	clSetKernel krn01,4,kabeP

	clSetKernel krn4,0,YU
	clSetKernel krn4,1,YV
	clSetKernel krn4,2,YVU
	clSetKernel krn4,3,YUV
	clSetKernel krn4,4,YVT
	clSetKernel krn4,5,YUT

	clSetKernel krn10,0,YUN
	clSetKernel krn10,1,GXU
	clSetKernel krn10,2,GYU
	clSetKernel krn10,3,YU
	clSetKernel krn10,4,YVU
	clSetKernel krn10,5,GXd0
	clSetKernel krn10,6,GYd0
	clSetKernel krn10,7,Yd0
	clSetKernel krn10,8,DT
	clSetKernel krn10,9,kabeX

	clSetKernel krn11,0,YVN
	clSetKernel krn11,1,GXV
	clSetKernel krn11,2,GYV
	clSetKernel krn11,3,YUV
	clSetKernel krn11,4,YV
	clSetKernel krn11,5,GXd1
	clSetKernel krn11,6,GYd1
	clSetKernel krn11,7,Yd1
	clSetKernel krn11,8,DT
	clSetKernel krn11,9,kabeY

	clSetKernel krn12,0,YPN
	clSetKernel krn12,1,GXP
	clSetKernel krn12,2,GYP
	clSetKernel krn12,3,YUT
	clSetKernel krn12,4,YVT
	clSetKernel krn12,5,GXd2
	clSetKernel krn12,6,GYd2
	clSetKernel krn12,7,Yd2
	clSetKernel krn12,8,DT
	clSetKernel krn12,9,kabeP
	
	clSetKernel kout,0,out
	clSetKernel kout,1,RYS
	clSetKernel kout,2,YU
	clSetKernel kout,3,YV

	clSetKernel ryuusi,0,RYS
	clSetKernel ryuusi,1,YUN
	clSetKernel ryuusi,2,YVN
	clSetKernel ryuusi,3,DT
	clSetKernel ryuusi,4,GXU
	clSetKernel ryuusi,5,GYU
	clSetKernel ryuusi,6,GXV
	clSetKernel ryuusi,7,GYV

	clSetKernel kout0,0,out
	return
	