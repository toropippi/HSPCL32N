//Sample30_奇数偶数分けその2共有メモリサンプル.hspのメモリ転送とカーネル実行を可視化
//clSetDeviceでデバイスをいろいろ変えて、どうなるか見てると面白いです。
#include "hspcl32n.as"
#include "ViewTimeStamp_module.as"
	randomize
	clinit
	//clSetDevice 1
	
	mes "65536個のスレッドを実行します。\n各々のスレッドで64個の数値を偶数奇数カウントしていきます。\nこのときカーネル内で256個のスレッドが同期して情報を共有します\n"
	dim rando,65536*64
		repeat 65536*64;419万個のランダム数生成
		rando.cnt=rnd(32767)*rnd(32000)+rnd(32767)
		loop
	mes "65536*64個のランダム数生成"

	mes "ソースコンパイル"
	prgid=clCreateProgram("奇数偶数分けその2共有メモリサンプル.cl")
	krnid=clCreateKernel(prgid,"wake")
	wait 1

	mes "VRAMメモリ確保"
	vram=clCreateBuffer(65536*64*4)//65536*64のint型配列を作成
	clWriteBuffer vram,rando,65536*64*4,,,,0//event id 0
	kisu=clCreateBuffer(256*4);奇数の数を保存するchar型配列変数を作成
	gusu=clCreateBuffer(256*4);偶数の数を保存するchar型配列変数を作成
	clSetKernel krnid,0,vram;
	clSetKernel krnid,1,0,4*256;奇数用ローカルメモリ作成。１ワークグループにつき1024byte作成
	clSetKernel krnid,2,0,4*256;偶数用ローカルメモリ作成。１ワークグループにつき1024byte作成
	clSetKernel krnid,3,kisu;
	clSetKernel krnid,4,gusu;

	//GPU側で計算開始！
	mes "カーネル実行中"
	//1スレッドあたり64個のint変数を仕分け、またローカルワークサイズが256なのがミソ！！
	clDoKrn1 krnid,65536*64/64,256,1//event id 1
	clFinish
	mes "カーネル実行終了"
	
	//CPU側で集計
	dim k,256
	clReadBuffer kisu,k,256*4,,,,2//event id 2
	奇数の数=0
		repeat 256
		奇数の数+=k.cnt
		loop
	clReadBuffer gusu,k,256*4,,,,3//event id 3
	偶数の数=0
		repeat 256
		偶数の数+=k.cnt
		loop

	//表示
	mes "\nGPUでカウントした結果"
	mes "奇数の数		"+奇数の数
	mes "偶数の数		"+偶数の数
	mes "奇数の数＋数の数＝	"+(偶数の数+奇数の数)+"    =4194304なら正確にできた"


	//CPU側で計算開始
	repeat 65536*64;419万個ループ
		if rando.cnt\2:intkisuko++:else:intgusuko++
	loop

	//表示
	mes "\nCPUでカウントした結果"
	mes "奇数の数		"+intkisuko
	mes "偶数の数		"+intgusuko
	mes "奇数の数＋偶数の数＝	"+(intkisuko+intgusuko)+"    =4194304なら正確にできた"

	//タイムスタンプ可視化
	screen 1,640,480,0
	
	ViewEvents2 4
	stop