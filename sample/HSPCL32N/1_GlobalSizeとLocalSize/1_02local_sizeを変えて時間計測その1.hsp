//やってることはVecAdd.hspと同じ
//並列数が同じでも、local_sizeを変えると計算時間が変わってくることがわかります。
//適切なlocal_sizeを指定できるようにしましょう。
//基本的には64,128,256を指定すれば間違いないですが、前提としてglobal_size(並列数)がそれで割り切れないといけません。
//なおlocal_sizeの最大はclGetDeviceInfo_i64(CL_DEVICE_MAX_WORK_ITEM_SIZES,0)で取得できますが、一般的に1024が上限です。
//さらにclGetDeviceInfo_i64(CL_DEVICE_MAX_WORK_ITEM_SIZES,0)で取得した数が仮に1024でも実際は256までということもあるので、なんだか信用できないです。
#include "hspcl32n.as"
	clinit
	prg=clCreateProgram("VecAdd.cl")
	krn=clCreateKernel(prg,"vecAdd")
	
	n=1024*1024
	clmem_A=clCreateBuffer(n*4)
	clmem_B=clCreateBuffer(n*4)
	clmem_C=clCreateBuffer(n*4)
	
	dim host_A,n
	dim host_B,n
	dim host_C,n
		repeat n
		host_A.cnt=cnt
		host_B.cnt=cnt
		loop
	
	clWriteBuffer clmem_A,host_A,n*4,0,0//CPU→GPU
	clWriteBuffer clmem_B,host_B,n*4,0,0//CPU→GPU
	
	clSetKernel krn,0,clmem_A
	clSetKernel krn,1,clmem_B
	clSetKernel krn,2,clmem_C

	local_size=1,2,4,8,16,32,64,128,256,0//0だけは、「自動で決定される」というおまじないの数字
		repeat length(local_size)
		clDoKrn1 krn,n,local_size.cnt,cnt//同じ計算を、local_sizeだけ変えてなんどもやる
		clFinish
		wait 1
		loop
	clReadBuffer clmem_C,host_C,n*4,0,0//GPU→CPU

	//計算時間表示
		repeat length(local_size)
		start_time=clGetEventLogs(cnt,6)
		end_time=clGetEventLogs(cnt,7)
		c_time=end_time-start_time
		mes "local_size = "+local_size.cnt+" のときの計算時間        "+c_time
		loop

	stop