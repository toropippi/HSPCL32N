/////////////////////////////////////////////////////////////////////////////////////////////////
//負巡回畳み込み乗算サンプル
//	a1=0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.0,3.0,4.0,5.0,0.0
//	a2=0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0	

//a1*a2をすることでa1の後ろの2,3,4,5のうち5が巡回してくる
//ここを負巡回畳み込み乗算をすることで巡回部分を-5にできる
/////////////////////////////////////////////////////////////////////////////////////////////////
#include "hspcl32n.as"
	clinit
	randomize
	M=4//冪指数。多分9以降は共有メモリサイズオーバーでエラーになる
	N=1<<M
	
	fdim hsp_dataF1,N*2//実数と虚数が交互にはいるfloat型配列、初期値
	fdim hsp_dataF2,N*2//実数と虚数が交互にはいるfloat型配列、初期値
	fdim hsp_retF,N*2//実数と虚数が交互にはいるfloat型配列、結果格納用
	
	prgid=clCreateProgram("FFTlocal.cl")
	krnfft=clCreateKernel(prgid,"fp_FFTlocal")
	krnhdm=clCreateKernel(prgid,"HADAMARD")
	krnpre=clCreateKernel(prgid,"preFFT")
	krnpost=clCreateKernel(prgid,"postFFT")
	fftarray1=clCreateBuffer(N*2*4)//1要素当たり実数と虚数があり、1つの数字は4byte
	fftarray2=clCreateBuffer(N*2*4)//1要素当たり実数と虚数があり、1つの数字は4byte
	gosub*fftの初期値設定
	clWriteBuffer fftarray1,hsp_dataF1,N*2*4
	clWriteBuffer fftarray2,hsp_dataF2,N*2*4

	//負巡回に必要な前計算
	clSetKernel krnpre,0,fftarray1
	clSetKernel krnpre,1,N
	clDoKrn1 krnpre,N,N
	clSetKernel krnpre,0,fftarray2
	clDoKrn1 krnpre,N,N

	//1
	clSetKernel krnfft,0,fftarray1
	clSetKernel krnfft,1,M
	clSetKernel krnfft,2,0,N*8//ローカルメモリ作成。第4引数に0以外を指定することが必須。１ワークグループにつきN*sizeof(float2)
	clSetKernel krnfft,3,float(1)
	clDoKrn1 krnfft,N/2,N/2//共有メモリにおさまるサイズなら一括で計算できる。カーネル内でビット逆順もしてる

	//2
	clSetKernel krnfft,0,fftarray2
	clSetKernel krnfft,1,M
	clSetKernel krnfft,2,0,N*8//ローカルメモリ作成。第4引数に0以外を指定することが必須。１ワークグループにつきN*sizeof(float2)
	clSetKernel krnfft,3,float(1)
	clDoKrn1 krnfft,N/2,N/2//共有メモリにおさまるサイズなら一括で計算できる。カーネル内でビット逆順もしてる

	//3
	clSetKernel krnhdm,0,fftarray1
	clSetKernel krnhdm,1,fftarray2
	clDoKrn1 krnhdm,N,N

	//4
	clSetKernel krnfft,0,fftarray1
	clSetKernel krnfft,1,M
	clSetKernel krnfft,2,0,N*8//ローカルメモリ作成。第4引数に0以外を指定することが必須。１ワークグループにつきN*sizeof(float2)
	clSetKernel krnfft,3,float(-1)
	clDoKrn1 krnfft,N/2,N/2//共有メモリにおさまるサイズなら一括で計算できる。カーネル内でビット逆順もしてる

	//負巡回に必要な後計算
	clSetKernel krnpost,0,fftarray1
	clSetKernel krnpost,1,N
	clDoKrn1 krnpost,N,N
	
	clDoXf "A[i]/=n;",fftarray1,N
	
	clReadBuffer fftarray1,hsp_retF,N*2*4//結果取得

	pos 0,0
	mes "GPU\n実数		虚数"
	pos 0,38
		repeat limit(N,1,16)
		mes ""+hsp_retF(cnt*2)+"	"+hsp_retF(cnt*2+1)
		loop

	stop



*fftの初期値設定
	a1=0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.0,3.0,4.0,5.0,0.0
	a2=0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0	
	
		repeat N
		hsp_dataF1(cnt*2+0)=float(a1.cnt)//実数部
		hsp_dataF1(cnt*2+1)=float(0)//虚数部
		loop
		
		repeat N
		hsp_dataF2(cnt*2+0)=float(a2.cnt)//実数部
		hsp_dataF2(cnt*2+1)=float(0)//虚数部
		loop
	return

