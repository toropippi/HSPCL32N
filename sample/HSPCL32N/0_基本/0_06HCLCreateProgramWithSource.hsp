//やってることはVecAdd.hspと同じ
#include "hspcl32n.as"
	clinit
	
	source={"
__kernel void vecAdd(__global int* a,__global int* b,__global int* c)
{
    uint gid = get_global_id(0);
    c[gid] = a[gid] + b[gid];
}
	"}
	
	prg=clCreateProgramWithSource(source)//OpenCLのコードが書かれたstrを直接入れることもできる
	krn=clCreateKernel(prg,"vecAdd")//"VecAdd.cl"にかかれた関数をもってくる
	
	n=256//配列サイズ
	clmem_A=clCreateBuffer(n*4)//指定はbyte数で
	clmem_B=clCreateBuffer(n*4)//4はint型のサイズ
	clmem_C=clCreateBuffer(n*4)
	
	dim host_A,n
	dim host_B,n
	dim host_C,n
		repeat n
		host_A.cnt=cnt//HSPで初期値を代入
		host_B.cnt=cnt
		loop
	
	clWriteBuffer clmem_A,host_A,n*4,0,0//CPU→GPU
	clWriteBuffer clmem_B,host_B,n*4,0,0//CPU→GPU
	
	clSetKernel krn,0,clmem_A//OpenCLコードの"vecAdd"に引数を適応
	clSetKernel krn,1,clmem_B//OpenCLコードの"vecAdd"に引数を適応
	clSetKernel krn,2,clmem_C//OpenCLコードの"vecAdd"に引数を適応
	
	mes "計算start"
	clDoKrn1 krn,n,n//GPUで計算。clDoKrn1は1次元の数で並列数を指定する命令
	clReadBuffer clmem_C,host_C,n*4,0,0//GPU→CPU
	mes "計算end"
	
		repeat n
		mes ""+host_A.cnt+" + "+host_B.cnt+" = "+host_C.cnt
		loop
	stop